(function() {
  var WebSocket, fs, http, livereload, path, request, should, sinon, url;

  livereload = require('../lib/livereload');

  should = require('should');

  request = require('request');

  http = require('http');

  url = require('url');

  fs = require('fs');

  path = require('path');

  WebSocket = require('ws');

  sinon = require('sinon');

  describe('livereload config', function() {
    it('should remove default exts when provided new exts', function(done) {
      var server;
      server = livereload.createServer({
        port: 35729,
        exts: ["html"]
      }, function() {
        server.close();
        return done();
      });
      return server.config.exts.should.eql(["html"]);
    });
    it('should incldue default exts when provided extraExts', function(done) {
      var extensionsList, server;
      server = livereload.createServer({
        port: 35729,
        extraExts: ["foobar"]
      }, function() {
        server.close();
        return done();
      });
      extensionsList = ['foobar', 'html', 'css', 'js', 'png', 'gif', 'jpg', 'php', 'php5', 'py', 'rb', 'erb', 'coffee'];
      return server.config.exts.should.eql(extensionsList);
    });
    it('extraExts must override exts if both are given', function(done) {
      var extensionsList, server;
      server = livereload.createServer({
        port: 35729,
        exts: ["md"],
        extraExts: ["foobar"]
      }, function() {
        server.close();
        return done();
      });
      extensionsList = ['foobar', 'html', 'css', 'js', 'png', 'gif', 'jpg', 'php', 'php5', 'py', 'rb', 'erb', 'coffee'];
      return server.config.exts.should.eql(extensionsList);
    });
    return it('should support filesToReload', function(done) {
      var server;
      server = livereload.createServer({
        port: 35729,
        filesToReload: ["index.html"]
      }, function() {
        server.close();
        return done();
      });
      return server.config.filesToReload.should.eql(["index.html"]);
    });
  });

  describe('livereload http file serving', function() {
    it('should serve up livereload.js', function(done) {
      var fileContents, server;
      server = livereload.createServer({
        port: 35729
      });
      fileContents = fs.readFileSync('./node_modules/livereload-js/dist/livereload.js').toString();
      return request('http://localhost:35729/livereload.js?snipver=1', function(error, response, body) {
        should.not.exist(error);
        response.statusCode.should.equal(200);
        fileContents.should.equal(body);
        server.config.server.close();
        return done();
      });
    });
    it('should connect to the websocket server', function(done) {
      var server, ws;
      server = livereload.createServer({
        port: 35729
      });
      ws = new WebSocket('ws://localhost:35729/livereload');
      ws.on('open', function() {
        var data;
        data = JSON.stringify({
          command: 'hello',
          protocols: ['http://livereload.com/protocols/official-7', 'http://livereload.com/protocols/official-8', 'http://livereload.com/protocols/2.x-origin-version-negotiation']
        });
        return ws.send(data);
      });
      return ws.on('message', function(data, flags) {
        console.log("hello");
        data.should.equal(JSON.stringify({
          command: 'hello',
          protocols: ['http://livereload.com/protocols/official-7', 'http://livereload.com/protocols/official-8', 'http://livereload.com/protocols/official-9', 'http://livereload.com/protocols/2.x-origin-version-negotiation', 'http://livereload.com/protocols/2.x-remote-control'],
          serverName: 'node-livereload'
        }));
        server.config.server.close();
        ws.close();
        return done();
      });
    });
    it('should allow you to override the internal http server', function(done) {
      var app, server;
      app = http.createServer(function(req, res) {
        if (url.parse(req.url).pathname === '/livereload.js') {
          res.writeHead(200, {
            'Content-Type': 'text/javascript'
          });
          return res.end('// nothing to see here');
        }
      });
      server = livereload.createServer({
        port: 35729,
        server: app
      });
      return request('http://localhost:35729/livereload.js?snipver=1', function(error, response, body) {
        should.not.exist(error);
        response.statusCode.should.equal(200);
        body.should.equal('// nothing to see here');
        server.config.server.close();
        return done();
      });
    });
    it('should allow you to specify ssl certificates to run via https', function(done) {
      var fileContents, server, unsafeRequest;
      server = livereload.createServer({
        port: 35729,
        https: {
          cert: fs.readFileSync(path.join(__dirname, 'ssl/localhost.cert')),
          key: fs.readFileSync(path.join(__dirname, 'ssl/localhost.key'))
        }
      });
      fileContents = fs.readFileSync('./node_modules/livereload-js/dist/livereload.js').toString();
      unsafeRequest = request.defaults({
        strictSSL: false,
        rejectUnauthorized: false
      });
      return unsafeRequest('https://localhost:35729/livereload.js?snipver=1', function(error, response, body) {
        should.not.exist(error);
        response.statusCode.should.equal(200);
        fileContents.should.equal(body);
        server.config.server.close();
        return done();
      });
    });
    return it('should support passing a callback to the websocket server', function(done) {
      var server;
      return server = livereload.createServer({
        port: 35729
      }, function() {
        server.config.server.close();
        return done();
      });
    });
  });

  describe('livereload server startup', function() {
    var new_server, server;
    server = void 0;
    new_server = void 0;
    beforeEach(function(done) {
      server = livereload.createServer({
        port: 35729,
        debug: false
      });
      return setTimeout(done, 2000);
    });
    afterEach(function(done) {
      server.close();
      new_server.close();
      server = void 0;
      new_server = void 0;
      return done();
    });
    return it('should gracefully handle something running on the same port', function(done) {
      new_server = livereload.createServer({
        debug: false,
        port: 35729
      });
      new_server.on('error', function(err) {
        return err.code.should.be.equal("EADDRINUSE");
      });
      return done();
    });
  });

  describe('livereload file watching', function() {
    describe("file watching behavior", function() {
      var cssFile, extraFile, jsFile, refresh, server, specificFile;
      jsFile = cssFile = specificFile = extraFile = server = refresh = void 0;
      beforeEach(function(done) {
        jsFile = path.join(__dirname, "tmpfile.js");
        cssFile = path.join(__dirname, "tmpfile.css");
        specificFile = path.join(__dirname, "tmpfile");
        extraFile = path.join(__dirname, "tmpfile.ex");
        fs.writeFileSync(jsFile, "use strict;", "utf-8");
        fs.writeFileSync(cssFile, "/* some css */");
        fs.writeFileSync(specificFile, "watch me");
        return setTimeout(done, 1000);
      });
      afterEach(function(done) {
        server.close();
        server = void 0;
        return setTimeout(done, 1000);
      });
      after(function() {
        fs.unlinkSync(jsFile);
        fs.unlinkSync(cssFile);
        fs.unlinkSync(specificFile);
        return fs.unlinkSync(extraFile);
      });
      describe("with no extensions specified, so defaults are used", function() {
        beforeEach(function(done) {
          server = livereload.createServer({
            port: 22345
          });
          refresh = sinon.spy(server, "refresh");
          server.watch(__dirname);
          return server.watcher.on('ready', done);
        });
        it("reloads js file", function(done) {
          refresh.callCount.should.be.exactly(0);
          fs.writeFileSync(jsFile, "use strict; var a = 1;", "utf-8");
          return setTimeout(function() {
            refresh.callCount.should.be.exactly(1);
            return done();
          }, 500);
        });
        return it("reloads css file", function(done) {
          refresh.callCount.should.be.exactly(0);
          fs.writeFileSync(cssFile, "");
          return setTimeout(function() {
            refresh.callCount.should.be.exactly(1);
            return done();
          }, 500);
        });
      });
      describe("with default exts overridden", function() {
        beforeEach(function(done) {
          server = livereload.createServer({
            exts: ["js"],
            port: 22345
          });
          refresh = sinon.spy(server, "refresh");
          server.watch(__dirname);
          return server.watcher.on('ready', done);
        });
        it("reloads js file", function(done) {
          refresh.callCount.should.be.exactly(0);
          fs.writeFileSync(jsFile, "use strict; var a = 1;", "utf-8");
          return setTimeout(function() {
            refresh.callCount.should.be.exactly(1);
            return done();
          }, 500);
        });
        return it("does not reload css file", function(done) {
          refresh.callCount.should.be.exactly(0);
          fs.writeFileSync(cssFile, "");
          return setTimeout(function() {
            refresh.callCount.should.be.exactly(0);
            return done();
          }, 500);
        });
      });
      describe("with extraexts added", function() {
        beforeEach(function(done) {
          server = livereload.createServer({
            extraExts: ["ex"],
            port: 22345
          });
          refresh = sinon.spy(server, "refresh");
          server.watch(__dirname);
          return server.watcher.on('ready', done);
        });
        it("reloads the ex file", function(done) {
          refresh.callCount.should.be.exactly(0);
          fs.writeFileSync(extraFile, "use strict; var a = 1;", "utf-8");
          return setTimeout(function() {
            refresh.callCount.should.be.exactly(1);
            return done();
          }, 500);
        });
        return it("still reloads js file", function(done) {
          refresh.callCount.should.be.exactly(0);
          fs.writeFileSync(jsFile, "use strict; var a = 1;", "utf-8");
          return setTimeout(function() {
            refresh.callCount.should.be.exactly(1);
            return done();
          }, 500);
        });
      });
      return describe("with filesToReload specified", function() {
        beforeEach(function(done) {
          server = livereload.createServer({
            filesToReload: ["tmpfile"],
            port: 22345
          });
          refresh = sinon.spy(server, "refresh");
          server.watch(__dirname);
          return server.watcher.on('ready', done);
        });
        it("reloads specific file", function(done) {
          refresh.callCount.should.be.exactly(0);
          fs.writeFileSync(specificFile, "testing");
          return setTimeout(function() {
            refresh.callCount.should.be.exactly(1);
            return done();
          }, 500);
        });
        return it("still reloads js file", function(done) {
          refresh.callCount.should.be.exactly(0);
          fs.writeFileSync(jsFile, "use strict; var a = 1;", "utf-8");
          return setTimeout(function() {
            refresh.callCount.should.be.exactly(1);
            return done();
          }, 500);
        });
      });
    });
    it('should correctly ignore common exclusions', function() {});
    return it('should not exclude a dir named git', function() {});
  });

}).call(this);
